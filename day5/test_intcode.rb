require 'minitest/autorun'
require_relative 'intcode'

class TestIntcode < MiniTest::Unit::TestCase
  def test_one
    opcode = [1,9,10,3,2,3,11,0,99,30,40,50]
    expected = [3500,9,10,70, 2,3,11,0, 99, 30,40,50]
    op = Intcode.new.runner(opcode, 0)
    assert_equal(op, expected)
  end

  def test_two
    opcode = [1,0,0,0,99]
    expected = [2,0,0,0,99]
    op = Intcode.new.runner(opcode, 0)
    assert_equal(op, expected)
  end

  def test_three
    opcode = [2,3,0,3,99]
    expected = [2,3,0,6,99]
    op = Intcode.new.runner(opcode, 0)
    assert_equal(op, expected)
  end

  def test_four
    opcode = [2,4,4,5,99,0]
    expected = [2,4,4,5,99,9801]
    op = Intcode.new.runner(opcode, 0)
    assert_equal(op, expected)
  end

  def test_five
    opcode = [1,1,1,4,99,5,6,0,99]
    expected = [30,1,1,4,2,5,6,0,99]
    op = Intcode.new.runner(opcode, 0)
    assert_equal(op, expected)
  end

  def test_day_two_one
    opcode = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,13,19,1,9,19,23,1,6,23,27,2,27,9,31,2,6,31,35,1,5,35,39,1,10,39,43,1,43,13,47,1,47,9,51,1,51,9,55,1,55,9,59,2,9,59,63,2,9,63,67,1,5,67,71,2,13,71,75,1,6,75,79,1,10,79,83,2,6,83,87,1,87,5,91,1,91,9,95,1,95,10,99,2,9,99,103,1,5,103,107,1,5,107,111,2,111,10,115,1,6,115,119,2,10,119,123,1,6,123,127,1,127,5,131,2,9,131,135,1,5,135,139,1,139,10,143,1,143,2,147,1,147,5,0,99,2,0,14,0]
    expected = [639495, 0, 0, 2, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 13, 0, 1, 9, 19, 3, 1, 6, 23, 5, 2, 27, 9, 15, 2, 6, 31, 30, 1, 5, 35, 31, 1, 10, 39, 35, 1, 43, 13, 40, 1, 47, 9, 43, 1, 51, 9, 46, 1, 55, 9, 49, 2, 9, 59, 147, 2, 9, 63, 441, 1, 5, 67, 442, 2, 13, 71, 2210, 1, 6, 75, 2212, 1, 10, 79, 2216, 2, 6, 83, 4432, 1, 87, 5, 4433, 1, 91, 9, 4436, 1, 95, 10, 4440, 2, 9, 99, 13320, 1, 5, 103, 13321, 1, 5, 107, 13322, 2, 111, 10, 53288, 1, 6, 115, 53290, 2, 10, 119, 213160, 1, 6, 123, 213162, 1, 127, 5, 213163, 2, 9, 131, 639489, 1, 5, 135, 639490, 1, 139, 10, 639494, 1, 143, 2, 639494, 1, 147, 5, 0, 99, 2, 0, 14, 0]
    op = Intcode.new.runner(opcode, 0)
    assert_equal(op, expected)
  end

  def test_determine_noun_and_verb
    memory = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,13,19,1,9,19,23,1,6,23,27,2,27,9,31,2,6,31,35,1,5,35,39,1,10,39,43,1,43,13,47,1,47,9,51,1,51,9,55,1,55,9,59,2,9,59,63,2,9,63,67,1,5,67,71,2,13,71,75,1,6,75,79,1,10,79,83,2,6,83,87,1,87,5,91,1,91,9,95,1,95,10,99,2,9,99,103,1,5,103,107,1,5,107,111,2,111,10,115,1,6,115,119,2,10,119,123,1,6,123,127,1,127,5,131,2,9,131,135,1,5,135,139,1,139,10,143,1,143,2,147,1,147,5,0,99,2,0,14,0]
    Intcode.new.futz(memory)
  end

  # def test_multiply
  #   opcode = [1002,4,3,4,33]
  #   op = Intcode.new.runner(opcode, 0)
  #   puts op
  # end
end